// After making changes to the *.proto files, always run the following
// command in current directory to update the generated code:
// go generate

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: rollout.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RolloutPluginService_Initialize_FullMethodName                 = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/Initialize"
	RolloutPluginService_BeginRollout_FullMethodName               = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/BeginRollout"
	RolloutPluginService_ProgressRollout_FullMethodName            = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/ProgressRollout"
	RolloutPluginService_ValidateRolloutCompletion_FullMethodName  = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/ValidateRolloutCompletion"
	RolloutPluginService_BeginRollback_FullMethodName              = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/BeginRollback"
	RolloutPluginService_ProgressRollback_FullMethodName           = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/ProgressRollback"
	RolloutPluginService_ValidateRollbackCompletion_FullMethodName = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/ValidateRollbackCompletion"
	RolloutPluginService_MutateManifestWork_FullMethodName         = "/io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService/MutateManifestWork"
)

// RolloutPluginServiceClient is the client API for RolloutPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RolloutPluginService is the service for the rollout plugin.
type RolloutPluginServiceClient interface {
	// Initialize initializes the plugin
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// BeginRollout is called before the manifestwork resource is applied.
	// It is used to prepare the rollout.
	BeginRollout(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ProgressRollout is called after the manifestwork is applied.
	// Whenever the feedbacks are updated, this method will be called.
	// The plugin can execute the rollout logic based on the feedback status changes.
	ProgressRollout(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ValidateRolloutCompletion is called to validate the completion of the rollout.
	// It is used to check if the rollout is completed successfully.
	// If the validation is completed successfully, the plugin should return a SUCCEEDED result.
	// If the validation is still in progress, the plugin should return a INPROGRESS result.
	// If the validation is failed, the plugin should return a FAILED result.
	ValidateRolloutCompletion(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// BeginRollback is called before the manifestwork resource is rolled back.
	// It is used to prepare the rollback.
	BeginRollback(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ProgressRollback is called after the manifestwork is rolled back.
	// Whenever the feedbacks are updated, this method will be called.
	// The plugin can execute the rollback logic based on the feedback status changes.
	ProgressRollback(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ValidateRollbackCompletion is called to validate the completion of the rollback.
	// It is used to check if the rollback is completed successfully.
	// If the validation is completed successfully, the plugin should return a SUCCEEDED result.
	// If the validation is still in progress, the plugin should return a INPROGRESS result.
	// If the validation is failed, the plugin should return a FAILED result.
	ValidateRollbackCompletion(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// MutateManifestWork is called to mutate the manifestwork resource before it is applied or rolled back.
	// MWRS controller provides the current rollout status to the plugin.
	// The plugin can use this information to mutate the manifestwork resource.
	MutateManifestWork(ctx context.Context, in *MutateManifestWorkRequest, opts ...grpc.CallOption) (*MutateManifestWorkResponse, error)
}

type rolloutPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolloutPluginServiceClient(cc grpc.ClientConnInterface) RolloutPluginServiceClient {
	return &rolloutPluginServiceClient{cc}
}

func (c *rolloutPluginServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, RolloutPluginService_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) BeginRollout(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RolloutPluginService_BeginRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) ProgressRollout(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RolloutPluginService_ProgressRollout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) ValidateRolloutCompletion(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, RolloutPluginService_ValidateRolloutCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) BeginRollback(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RolloutPluginService_BeginRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) ProgressRollback(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RolloutPluginService_ProgressRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) ValidateRollbackCompletion(ctx context.Context, in *RolloutPluginRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, RolloutPluginService_ValidateRollbackCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutPluginServiceClient) MutateManifestWork(ctx context.Context, in *MutateManifestWorkRequest, opts ...grpc.CallOption) (*MutateManifestWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateManifestWorkResponse)
	err := c.cc.Invoke(ctx, RolloutPluginService_MutateManifestWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolloutPluginServiceServer is the server API for RolloutPluginService service.
// All implementations must embed UnimplementedRolloutPluginServiceServer
// for forward compatibility.
//
// RolloutPluginService is the service for the rollout plugin.
type RolloutPluginServiceServer interface {
	// Initialize initializes the plugin
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// BeginRollout is called before the manifestwork resource is applied.
	// It is used to prepare the rollout.
	BeginRollout(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error)
	// ProgressRollout is called after the manifestwork is applied.
	// Whenever the feedbacks are updated, this method will be called.
	// The plugin can execute the rollout logic based on the feedback status changes.
	ProgressRollout(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error)
	// ValidateRolloutCompletion is called to validate the completion of the rollout.
	// It is used to check if the rollout is completed successfully.
	// If the validation is completed successfully, the plugin should return a SUCCEEDED result.
	// If the validation is still in progress, the plugin should return a INPROGRESS result.
	// If the validation is failed, the plugin should return a FAILED result.
	ValidateRolloutCompletion(context.Context, *RolloutPluginRequest) (*ValidateResponse, error)
	// BeginRollback is called before the manifestwork resource is rolled back.
	// It is used to prepare the rollback.
	BeginRollback(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error)
	// ProgressRollback is called after the manifestwork is rolled back.
	// Whenever the feedbacks are updated, this method will be called.
	// The plugin can execute the rollback logic based on the feedback status changes.
	ProgressRollback(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error)
	// ValidateRollbackCompletion is called to validate the completion of the rollback.
	// It is used to check if the rollback is completed successfully.
	// If the validation is completed successfully, the plugin should return a SUCCEEDED result.
	// If the validation is still in progress, the plugin should return a INPROGRESS result.
	// If the validation is failed, the plugin should return a FAILED result.
	ValidateRollbackCompletion(context.Context, *RolloutPluginRequest) (*ValidateResponse, error)
	// MutateManifestWork is called to mutate the manifestwork resource before it is applied or rolled back.
	// MWRS controller provides the current rollout status to the plugin.
	// The plugin can use this information to mutate the manifestwork resource.
	MutateManifestWork(context.Context, *MutateManifestWorkRequest) (*MutateManifestWorkResponse, error)
	mustEmbedUnimplementedRolloutPluginServiceServer()
}

// UnimplementedRolloutPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRolloutPluginServiceServer struct{}

func (UnimplementedRolloutPluginServiceServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedRolloutPluginServiceServer) BeginRollout(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginRollout not implemented")
}
func (UnimplementedRolloutPluginServiceServer) ProgressRollout(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgressRollout not implemented")
}
func (UnimplementedRolloutPluginServiceServer) ValidateRolloutCompletion(context.Context, *RolloutPluginRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRolloutCompletion not implemented")
}
func (UnimplementedRolloutPluginServiceServer) BeginRollback(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginRollback not implemented")
}
func (UnimplementedRolloutPluginServiceServer) ProgressRollback(context.Context, *RolloutPluginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgressRollback not implemented")
}
func (UnimplementedRolloutPluginServiceServer) ValidateRollbackCompletion(context.Context, *RolloutPluginRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRollbackCompletion not implemented")
}
func (UnimplementedRolloutPluginServiceServer) MutateManifestWork(context.Context, *MutateManifestWorkRequest) (*MutateManifestWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateManifestWork not implemented")
}
func (UnimplementedRolloutPluginServiceServer) mustEmbedUnimplementedRolloutPluginServiceServer() {}
func (UnimplementedRolloutPluginServiceServer) testEmbeddedByValue()                              {}

// UnsafeRolloutPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolloutPluginServiceServer will
// result in compilation errors.
type UnsafeRolloutPluginServiceServer interface {
	mustEmbedUnimplementedRolloutPluginServiceServer()
}

func RegisterRolloutPluginServiceServer(s grpc.ServiceRegistrar, srv RolloutPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedRolloutPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RolloutPluginService_ServiceDesc, srv)
}

func _RolloutPluginService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_BeginRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).BeginRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_BeginRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).BeginRollout(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_ProgressRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).ProgressRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_ProgressRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).ProgressRollout(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_ValidateRolloutCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).ValidateRolloutCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_ValidateRolloutCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).ValidateRolloutCompletion(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_BeginRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).BeginRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_BeginRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).BeginRollback(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_ProgressRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).ProgressRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_ProgressRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).ProgressRollback(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_ValidateRollbackCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).ValidateRollbackCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_ValidateRollbackCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).ValidateRollbackCompletion(ctx, req.(*RolloutPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutPluginService_MutateManifestWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateManifestWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutPluginServiceServer).MutateManifestWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutPluginService_MutateManifestWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutPluginServiceServer).MutateManifestWork(ctx, req.(*MutateManifestWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolloutPluginService_ServiceDesc is the grpc.ServiceDesc for RolloutPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolloutPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.openclustermanagement.sdkgo.plugin.proto.v1alpha1.RolloutPluginService",
	HandlerType: (*RolloutPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _RolloutPluginService_Initialize_Handler,
		},
		{
			MethodName: "BeginRollout",
			Handler:    _RolloutPluginService_BeginRollout_Handler,
		},
		{
			MethodName: "ProgressRollout",
			Handler:    _RolloutPluginService_ProgressRollout_Handler,
		},
		{
			MethodName: "ValidateRolloutCompletion",
			Handler:    _RolloutPluginService_ValidateRolloutCompletion_Handler,
		},
		{
			MethodName: "BeginRollback",
			Handler:    _RolloutPluginService_BeginRollback_Handler,
		},
		{
			MethodName: "ProgressRollback",
			Handler:    _RolloutPluginService_ProgressRollback_Handler,
		},
		{
			MethodName: "ValidateRollbackCompletion",
			Handler:    _RolloutPluginService_ValidateRollbackCompletion_Handler,
		},
		{
			MethodName: "MutateManifestWork",
			Handler:    _RolloutPluginService_MutateManifestWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rollout.proto",
}
